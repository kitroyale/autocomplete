<?php

namespace MageSuite\Autocomplete\Plugin\ElasticsuiteCore\Model\Autocomplete\Terms\DataProvider;

class MergeAutoGeneratedSuggestions
{
    /**
     * @var \Magento\Search\Model\QueryFactory
     */
    protected $queryFactory;

    /**
     * @var \MageSuite\Autocomplete\Model\Autocomplete\SuggestedPhrasesProvider
     */
    protected $suggestedPhrasesProvider;

    /**
     * @var \Magento\Search\Model\Autocomplete\ItemFactory
     */
    protected $itemFactory;

    /**
     * @var \MageSuite\Autocomplete\Helper\Configuration
     */
    protected $configuration;

    /**
     * @var \Smile\ElasticsuiteCore\Helper\Autocomplete
     */
    protected $maxSizeConfiguration;

    public function __construct(
        \Magento\Search\Model\QueryFactory $queryFactory,
        \MageSuite\Autocomplete\Model\Autocomplete\SuggestedPhrasesProvider $suggestedPhrasesProvider,
        \Magento\Search\Model\Autocomplete\ItemFactory $itemFactory,
        \MageSuite\Autocomplete\Helper\Configuration $configuration,
        \Smile\ElasticsuiteCore\Helper\Autocomplete $maxSizeConfiguration
    )
    {
        $this->queryFactory = $queryFactory;
        $this->suggestedPhrasesProvider = $suggestedPhrasesProvider;
        $this->itemFactory = $itemFactory;
        $this->maxSizeConfiguration = $maxSizeConfiguration;
        $this->configuration = $configuration;
    }

    public function afterGetItems(\Smile\ElasticsuiteCore\Model\Autocomplete\Terms\DataProvider $subject, $result) {
        if(!$this->configuration->isGenerationEnabled()) {
            return $result;
        }

        $query = $this->queryFactory->get();

        $suggestedPhrases = $this->suggestedPhrasesProvider->getSuggestions($query->getQueryText());

        foreach($suggestedPhrases as $phrase) {
            if($this->phraseExist($result, $phrase->getPhrase())) {
                continue;
            }

            $result[] = $this->itemFactory->create([
                'title' => $phrase->getPhrase(),
                'num_results' => $phrase->getProductsCount(),
                'type' => 'term',
            ]);
        }

        usort($result, [$this, 'sortByNumResults']);

        $maxSize = $this->maxSizeConfiguration->getMaxSize('term');

        if(count($result) > $maxSize) {
            $result = array_slice($result, 0, $maxSize);
        }

        return $result;
    }

    protected function phraseExist($result, string $suggestedPhrase)
    {
        foreach($result as $item) {
            if(mb_strtolower($item->getTitle()) === mb_strtolower($suggestedPhrase)) {
                return true;
            }
        }

        return false;
    }

    protected function sortByNumResults($first, $second) {
        if ($first->getNumResults() == $second->getNumResults()) {
            return 0;
        }
        return ($first->getNumResults() > $second->getNumResults()) ? -1 : 1;
    }
}